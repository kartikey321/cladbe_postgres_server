// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class RowJson {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RowJson {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRowJson(bb:flatbuffers.ByteBuffer, obj?:RowJson):RowJson {
  return (obj || new RowJson()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRowJson(bb:flatbuffers.ByteBuffer, obj?:RowJson):RowJson {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RowJson()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

row():string|null
row(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
row(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRowJson(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addRow(builder:flatbuffers.Builder, rowOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rowOffset, 0);
}

static endRowJson(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRowJson(builder:flatbuffers.Builder, rowOffset:flatbuffers.Offset):flatbuffers.Offset {
  RowJson.startRowJson(builder);
  RowJson.addRow(builder, rowOffset);
  return RowJson.endRowJson(builder);
}
}
