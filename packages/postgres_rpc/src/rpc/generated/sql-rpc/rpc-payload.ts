// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { AddSingleReq } from '../sql-rpc/add-single-req.js';
import { CreateTableReq } from '../sql-rpc/create-table-req.js';
import { DeleteRowReq } from '../sql-rpc/delete-row-req.js';
import { GetDataReq } from '../sql-rpc/get-data-req.js';
import { GetSingleReq } from '../sql-rpc/get-single-req.js';
import { RunAggregationReq } from '../sql-rpc/run-aggregation-req.js';
import { TableExistsReq } from '../sql-rpc/table-exists-req.js';
import { UpdateSingleReq } from '../sql-rpc/update-single-req.js';


export enum RpcPayload {
  NONE = 0,
  GetDataReq = 1,
  GetSingleReq = 2,
  AddSingleReq = 3,
  UpdateSingleReq = 4,
  DeleteRowReq = 5,
  CreateTableReq = 6,
  TableExistsReq = 7,
  RunAggregationReq = 8
}

export function unionToRpcPayload(
  type: RpcPayload,
  accessor: (obj:AddSingleReq|CreateTableReq|DeleteRowReq|GetDataReq|GetSingleReq|RunAggregationReq|TableExistsReq|UpdateSingleReq) => AddSingleReq|CreateTableReq|DeleteRowReq|GetDataReq|GetSingleReq|RunAggregationReq|TableExistsReq|UpdateSingleReq|null
): AddSingleReq|CreateTableReq|DeleteRowReq|GetDataReq|GetSingleReq|RunAggregationReq|TableExistsReq|UpdateSingleReq|null {
  switch(RpcPayload[type]) {
    case 'NONE': return null; 
    case 'GetDataReq': return accessor(new GetDataReq())! as GetDataReq;
    case 'GetSingleReq': return accessor(new GetSingleReq())! as GetSingleReq;
    case 'AddSingleReq': return accessor(new AddSingleReq())! as AddSingleReq;
    case 'UpdateSingleReq': return accessor(new UpdateSingleReq())! as UpdateSingleReq;
    case 'DeleteRowReq': return accessor(new DeleteRowReq())! as DeleteRowReq;
    case 'CreateTableReq': return accessor(new CreateTableReq())! as CreateTableReq;
    case 'TableExistsReq': return accessor(new TableExistsReq())! as TableExistsReq;
    case 'RunAggregationReq': return accessor(new RunAggregationReq())! as RunAggregationReq;
    default: return null;
  }
}

export function unionListToRpcPayload(
  type: RpcPayload, 
  accessor: (index: number, obj:AddSingleReq|CreateTableReq|DeleteRowReq|GetDataReq|GetSingleReq|RunAggregationReq|TableExistsReq|UpdateSingleReq) => AddSingleReq|CreateTableReq|DeleteRowReq|GetDataReq|GetSingleReq|RunAggregationReq|TableExistsReq|UpdateSingleReq|null, 
  index: number
): AddSingleReq|CreateTableReq|DeleteRowReq|GetDataReq|GetSingleReq|RunAggregationReq|TableExistsReq|UpdateSingleReq|null {
  switch(RpcPayload[type]) {
    case 'NONE': return null; 
    case 'GetDataReq': return accessor(index, new GetDataReq())! as GetDataReq;
    case 'GetSingleReq': return accessor(index, new GetSingleReq())! as GetSingleReq;
    case 'AddSingleReq': return accessor(index, new AddSingleReq())! as AddSingleReq;
    case 'UpdateSingleReq': return accessor(index, new UpdateSingleReq())! as UpdateSingleReq;
    case 'DeleteRowReq': return accessor(index, new DeleteRowReq())! as DeleteRowReq;
    case 'CreateTableReq': return accessor(index, new CreateTableReq())! as CreateTableReq;
    case 'TableExistsReq': return accessor(index, new TableExistsReq())! as TableExistsReq;
    case 'RunAggregationReq': return accessor(index, new RunAggregationReq())! as RunAggregationReq;
    default: return null;
  }
}
