// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { NullsSortOrder } from '../sql-schema/nulls-sort-order.js';


export class SqlFilterModifier {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SqlFilterModifier {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSqlFilterModifier(bb:flatbuffers.ByteBuffer, obj?:SqlFilterModifier):SqlFilterModifier {
  return (obj || new SqlFilterModifier()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSqlFilterModifier(bb:flatbuffers.ByteBuffer, obj?:SqlFilterModifier):SqlFilterModifier {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SqlFilterModifier()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

distinct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

caseInsensitive():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

nullsOrder():NullsSortOrder {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : NullsSortOrder.first;
}

static startSqlFilterModifier(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDistinct(builder:flatbuffers.Builder, distinct:boolean) {
  builder.addFieldInt8(0, +distinct, +false);
}

static addCaseInsensitive(builder:flatbuffers.Builder, caseInsensitive:boolean) {
  builder.addFieldInt8(1, +caseInsensitive, +false);
}

static addNullsOrder(builder:flatbuffers.Builder, nullsOrder:NullsSortOrder) {
  builder.addFieldInt8(2, nullsOrder, NullsSortOrder.first);
}

static endSqlFilterModifier(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSqlFilterModifier(builder:flatbuffers.Builder, distinct:boolean, caseInsensitive:boolean, nullsOrder:NullsSortOrder):flatbuffers.Offset {
  SqlFilterModifier.startSqlFilterModifier(builder);
  SqlFilterModifier.addDistinct(builder, distinct);
  SqlFilterModifier.addCaseInsensitive(builder, caseInsensitive);
  SqlFilterModifier.addNullsOrder(builder, nullsOrder);
  return SqlFilterModifier.endSqlFilterModifier(builder);
}
}
