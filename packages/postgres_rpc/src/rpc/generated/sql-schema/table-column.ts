// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ColumnConstraint } from '../sql-schema/column-constraint.js';
import { CustomOptions } from '../sql-schema/custom-options.js';
import { SQLDataType } from '../sql-schema/sqldata-type.js';


export class TableColumn {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TableColumn {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTableColumn(bb:flatbuffers.ByteBuffer, obj?:TableColumn):TableColumn {
  return (obj || new TableColumn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTableColumn(bb:flatbuffers.ByteBuffer, obj?:TableColumn):TableColumn {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TableColumn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dataType():SQLDataType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : SQLDataType.text;
}

isNullable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

constraints(index: number):ColumnConstraint|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

constraintsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

constraintsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

customOptions(obj?:CustomOptions):CustomOptions|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new CustomOptions()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTableColumn(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addDataType(builder:flatbuffers.Builder, dataType:SQLDataType) {
  builder.addFieldInt8(1, dataType, SQLDataType.text);
}

static addIsNullable(builder:flatbuffers.Builder, isNullable:boolean) {
  builder.addFieldInt8(2, +isNullable, +false);
}

static addConstraints(builder:flatbuffers.Builder, constraintsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, constraintsOffset, 0);
}

static createConstraintsVector(builder:flatbuffers.Builder, data:ColumnConstraint[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startConstraintsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addCustomOptions(builder:flatbuffers.Builder, customOptionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, customOptionsOffset, 0);
}

static endTableColumn(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
