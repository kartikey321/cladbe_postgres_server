// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BasicSqlDataFilterUnion, unionToBasicSqlDataFilterUnion, unionListToBasicSqlDataFilterUnion } from '../sql-schema/basic-sql-data-filter-union.js';
import { SQLFilterWrapperType } from '../sql-schema/sqlfilter-wrapper-type.js';


export class BasicSqlDataFilterWrapper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BasicSqlDataFilterWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBasicSqlDataFilterWrapper(bb:flatbuffers.ByteBuffer, obj?:BasicSqlDataFilterWrapper):BasicSqlDataFilterWrapper {
  return (obj || new BasicSqlDataFilterWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBasicSqlDataFilterWrapper(bb:flatbuffers.ByteBuffer, obj?:BasicSqlDataFilterWrapper):BasicSqlDataFilterWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BasicSqlDataFilterWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

filterWrapperType():SQLFilterWrapperType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : SQLFilterWrapperType.or;
}

filtersType(index: number):BasicSqlDataFilterUnion|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

filtersTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

filtersTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

filters(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

filtersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startBasicSqlDataFilterWrapper(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFilterWrapperType(builder:flatbuffers.Builder, filterWrapperType:SQLFilterWrapperType) {
  builder.addFieldInt8(0, filterWrapperType, SQLFilterWrapperType.or);
}

static addFiltersType(builder:flatbuffers.Builder, filtersTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, filtersTypeOffset, 0);
}

static createFiltersTypeVector(builder:flatbuffers.Builder, data:BasicSqlDataFilterUnion[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFiltersTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addFilters(builder:flatbuffers.Builder, filtersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, filtersOffset, 0);
}

static createFiltersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFiltersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endBasicSqlDataFilterWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBasicSqlDataFilterWrapper(builder:flatbuffers.Builder, filterWrapperType:SQLFilterWrapperType, filtersTypeOffset:flatbuffers.Offset, filtersOffset:flatbuffers.Offset):flatbuffers.Offset {
  BasicSqlDataFilterWrapper.startBasicSqlDataFilterWrapper(builder);
  BasicSqlDataFilterWrapper.addFilterWrapperType(builder, filterWrapperType);
  BasicSqlDataFilterWrapper.addFiltersType(builder, filtersTypeOffset);
  BasicSqlDataFilterWrapper.addFilters(builder, filtersOffset);
  return BasicSqlDataFilterWrapper.endBasicSqlDataFilterWrapper(builder);
}
}
