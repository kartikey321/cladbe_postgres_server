// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FilterValue, unionToFilterValue, unionListToFilterValue } from '../sql-schema/filter-value.js';


export class CursorEntry {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CursorEntry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCursorEntry(bb:flatbuffers.ByteBuffer, obj?:CursorEntry):CursorEntry {
  return (obj || new CursorEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCursorEntry(bb:flatbuffers.ByteBuffer, obj?:CursorEntry):CursorEntry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CursorEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

field():string|null
field(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
field(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

valueType():FilterValue {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FilterValue.NONE;
}

value<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCursorEntry(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addField(builder:flatbuffers.Builder, fieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fieldOffset, 0);
}

static addValueType(builder:flatbuffers.Builder, valueType:FilterValue) {
  builder.addFieldInt8(1, valueType, FilterValue.NONE);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valueOffset, 0);
}

static endCursorEntry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // field
  return offset;
}

static createCursorEntry(builder:flatbuffers.Builder, fieldOffset:flatbuffers.Offset, valueType:FilterValue, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  CursorEntry.startCursorEntry(builder);
  CursorEntry.addField(builder, fieldOffset);
  CursorEntry.addValueType(builder, valueType);
  CursorEntry.addValue(builder, valueOffset);
  return CursorEntry.endCursorEntry(builder);
}
}
