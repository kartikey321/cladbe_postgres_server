// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { BasicSqlDataFilterType } from '../sql-schema/basic-sql-data-filter-type.js';
import { FilterValue } from '../sql-schema/filter-value.js';
import { SqlFilterModifier } from '../sql-schema/sql-filter-modifier.js';
export class BasicSqlDataFilter {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsBasicSqlDataFilter(bb, obj) {
        return (obj || new BasicSqlDataFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsBasicSqlDataFilter(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BasicSqlDataFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fieldName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    valueType() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : FilterValue.NONE;
    }
    value(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    filterType() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : BasicSqlDataFilterType.equals;
    }
    modifier(obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new SqlFilterModifier()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startBasicSqlDataFilter(builder) {
        builder.startObject(5);
    }
    static addFieldName(builder, fieldNameOffset) {
        builder.addFieldOffset(0, fieldNameOffset, 0);
    }
    static addValueType(builder, valueType) {
        builder.addFieldInt8(1, valueType, FilterValue.NONE);
    }
    static addValue(builder, valueOffset) {
        builder.addFieldOffset(2, valueOffset, 0);
    }
    static addFilterType(builder, filterType) {
        builder.addFieldInt8(3, filterType, BasicSqlDataFilterType.equals);
    }
    static addModifier(builder, modifierOffset) {
        builder.addFieldOffset(4, modifierOffset, 0);
    }
    static endBasicSqlDataFilter(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
