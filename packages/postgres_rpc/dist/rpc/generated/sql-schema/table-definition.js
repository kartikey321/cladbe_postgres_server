// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { TableColumn } from '../sql-schema/table-column.js';
import { TableOptions } from '../sql-schema/table-options.js';
export class TableDefinition {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTableDefinition(bb, obj) {
        return (obj || new TableDefinition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTableDefinition(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TableDefinition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    columns(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new TableColumn()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    columnsLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    comment(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    tableOptions(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new TableOptions()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startTableDefinition(builder) {
        builder.startObject(4);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }
    static addColumns(builder, columnsOffset) {
        builder.addFieldOffset(1, columnsOffset, 0);
    }
    static createColumnsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startColumnsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addComment(builder, commentOffset) {
        builder.addFieldOffset(2, commentOffset, 0);
    }
    static addTableOptions(builder, tableOptionsOffset) {
        builder.addFieldOffset(3, tableOptionsOffset, 0);
    }
    static endTableDefinition(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
