// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { NullsSortOrder } from '../sql-schema/nulls-sort-order.js';
export class SqlFilterModifier {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSqlFilterModifier(bb, obj) {
        return (obj || new SqlFilterModifier()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSqlFilterModifier(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SqlFilterModifier()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    distinct() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    caseInsensitive() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    nullsOrder() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : NullsSortOrder.first;
    }
    static startSqlFilterModifier(builder) {
        builder.startObject(3);
    }
    static addDistinct(builder, distinct) {
        builder.addFieldInt8(0, +distinct, +false);
    }
    static addCaseInsensitive(builder, caseInsensitive) {
        builder.addFieldInt8(1, +caseInsensitive, +false);
    }
    static addNullsOrder(builder, nullsOrder) {
        builder.addFieldInt8(2, nullsOrder, NullsSortOrder.first);
    }
    static endSqlFilterModifier(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createSqlFilterModifier(builder, distinct, caseInsensitive, nullsOrder) {
        SqlFilterModifier.startSqlFilterModifier(builder);
        SqlFilterModifier.addDistinct(builder, distinct);
        SqlFilterModifier.addCaseInsensitive(builder, caseInsensitive);
        SqlFilterModifier.addNullsOrder(builder, nullsOrder);
        return SqlFilterModifier.endSqlFilterModifier(builder);
    }
}
