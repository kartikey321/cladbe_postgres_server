// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { OrderSort } from '../sql-schema/order-sort.js';
export class OrderKeySpec {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsOrderKeySpec(bb, obj) {
        return (obj || new OrderKeySpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsOrderKeySpec(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OrderKeySpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    field(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    sort() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : OrderSort.DESC_DEFAULT;
    }
    isPk() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    static startOrderKeySpec(builder) {
        builder.startObject(3);
    }
    static addField(builder, fieldOffset) {
        builder.addFieldOffset(0, fieldOffset, 0);
    }
    static addSort(builder, sort) {
        builder.addFieldInt8(1, sort, OrderSort.DESC_DEFAULT);
    }
    static addIsPk(builder, isPk) {
        builder.addFieldInt8(2, +isPk, +false);
    }
    static endOrderKeySpec(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // field
        return offset;
    }
    static createOrderKeySpec(builder, fieldOffset, sort, isPk) {
        OrderKeySpec.startOrderKeySpec(builder);
        OrderKeySpec.addField(builder, fieldOffset);
        OrderKeySpec.addSort(builder, sort);
        OrderKeySpec.addIsPk(builder, isPk);
        return OrderKeySpec.endOrderKeySpec(builder);
    }
}
