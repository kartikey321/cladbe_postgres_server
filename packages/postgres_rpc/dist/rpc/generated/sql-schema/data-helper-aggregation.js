// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { KeyValuePair } from '../sql-schema/key-value-pair.js';
export class DataHelperAggregation {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDataHelperAggregation(bb, obj) {
        return (obj || new DataHelperAggregation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDataHelperAggregation(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DataHelperAggregation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    count() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    sumValues(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new KeyValuePair()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    sumValuesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    avgValues(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new KeyValuePair()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    avgValuesLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    minimumValues(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new KeyValuePair()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    minimumValuesLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    maximumValues(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new KeyValuePair()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    maximumValuesLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startDataHelperAggregation(builder) {
        builder.startObject(5);
    }
    static addCount(builder, count) {
        builder.addFieldInt32(0, count, 0);
    }
    static addSumValues(builder, sumValuesOffset) {
        builder.addFieldOffset(1, sumValuesOffset, 0);
    }
    static createSumValuesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startSumValuesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAvgValues(builder, avgValuesOffset) {
        builder.addFieldOffset(2, avgValuesOffset, 0);
    }
    static createAvgValuesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startAvgValuesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMinimumValues(builder, minimumValuesOffset) {
        builder.addFieldOffset(3, minimumValuesOffset, 0);
    }
    static createMinimumValuesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMinimumValuesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMaximumValues(builder, maximumValuesOffset) {
        builder.addFieldOffset(4, maximumValuesOffset, 0);
    }
    static createMaximumValuesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMaximumValuesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endDataHelperAggregation(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createDataHelperAggregation(builder, count, sumValuesOffset, avgValuesOffset, minimumValuesOffset, maximumValuesOffset) {
        DataHelperAggregation.startDataHelperAggregation(builder);
        DataHelperAggregation.addCount(builder, count);
        DataHelperAggregation.addSumValues(builder, sumValuesOffset);
        DataHelperAggregation.addAvgValues(builder, avgValuesOffset);
        DataHelperAggregation.addMinimumValues(builder, minimumValuesOffset);
        DataHelperAggregation.addMaximumValues(builder, maximumValuesOffset);
        return DataHelperAggregation.endDataHelperAggregation(builder);
    }
}
