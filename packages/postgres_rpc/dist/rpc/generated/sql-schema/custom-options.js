// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { KeyValuePair } from '../sql-schema/key-value-pair.js';
export class CustomOptions {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCustomOptions(bb, obj) {
        return (obj || new CustomOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCustomOptions(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CustomOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    options(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new KeyValuePair()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    optionsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startCustomOptions(builder) {
        builder.startObject(1);
    }
    static addOptions(builder, optionsOffset) {
        builder.addFieldOffset(0, optionsOffset, 0);
    }
    static createOptionsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOptionsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endCustomOptions(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createCustomOptions(builder, optionsOffset) {
        CustomOptions.startCustomOptions(builder);
        CustomOptions.addOptions(builder, optionsOffset);
        return CustomOptions.endCustomOptions(builder);
    }
}
