// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Int64Value {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsInt64Value(bb, obj) {
        return (obj || new Int64Value()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsInt64Value(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Int64Value()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    value() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');
    }
    static startInt64Value(builder) {
        builder.startObject(1);
    }
    static addValue(builder, value) {
        builder.addFieldInt64(0, value, BigInt('0'));
    }
    static endInt64Value(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createInt64Value(builder, value) {
        Int64Value.startInt64Value(builder);
        Int64Value.addValue(builder, value);
        return Int64Value.endInt64Value(builder);
    }
}
