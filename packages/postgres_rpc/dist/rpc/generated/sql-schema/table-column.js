// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { CustomOptions } from '../sql-schema/custom-options.js';
import { SQLDataType } from '../sql-schema/sqldata-type.js';
export class TableColumn {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTableColumn(bb, obj) {
        return (obj || new TableColumn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTableColumn(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TableColumn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    dataType() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : SQLDataType.text;
    }
    isNullable() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    constraints(index) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    constraintsLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    constraintsArray() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    customOptions(obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new CustomOptions()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startTableColumn(builder) {
        builder.startObject(5);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }
    static addDataType(builder, dataType) {
        builder.addFieldInt8(1, dataType, SQLDataType.text);
    }
    static addIsNullable(builder, isNullable) {
        builder.addFieldInt8(2, +isNullable, +false);
    }
    static addConstraints(builder, constraintsOffset) {
        builder.addFieldOffset(3, constraintsOffset, 0);
    }
    static createConstraintsVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startConstraintsVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addCustomOptions(builder, customOptionsOffset) {
        builder.addFieldOffset(4, customOptionsOffset, 0);
    }
    static endTableColumn(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
