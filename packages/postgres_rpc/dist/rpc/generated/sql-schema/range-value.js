// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { FilterValue } from '../sql-schema/filter-value.js';
export class RangeValue {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRangeValue(bb, obj) {
        return (obj || new RangeValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRangeValue(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RangeValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    lowType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : FilterValue.NONE;
    }
    low(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    highType() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : FilterValue.NONE;
    }
    high(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    includeLow() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    }
    includeHigh() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    }
    static startRangeValue(builder) {
        builder.startObject(6);
    }
    static addLowType(builder, lowType) {
        builder.addFieldInt8(0, lowType, FilterValue.NONE);
    }
    static addLow(builder, lowOffset) {
        builder.addFieldOffset(1, lowOffset, 0);
    }
    static addHighType(builder, highType) {
        builder.addFieldInt8(2, highType, FilterValue.NONE);
    }
    static addHigh(builder, highOffset) {
        builder.addFieldOffset(3, highOffset, 0);
    }
    static addIncludeLow(builder, includeLow) {
        builder.addFieldInt8(4, +includeLow, +true);
    }
    static addIncludeHigh(builder, includeHigh) {
        builder.addFieldInt8(5, +includeHigh, +true);
    }
    static endRangeValue(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createRangeValue(builder, lowType, lowOffset, highType, highOffset, includeLow, includeHigh) {
        RangeValue.startRangeValue(builder);
        RangeValue.addLowType(builder, lowType);
        RangeValue.addLow(builder, lowOffset);
        RangeValue.addHighType(builder, highType);
        RangeValue.addHigh(builder, highOffset);
        RangeValue.addIncludeLow(builder, includeLow);
        RangeValue.addIncludeHigh(builder, includeHigh);
        return RangeValue.endRangeValue(builder);
    }
}
