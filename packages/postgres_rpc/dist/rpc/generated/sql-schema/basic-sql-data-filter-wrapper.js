// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { SQLFilterWrapperType } from '../sql-schema/sqlfilter-wrapper-type.js';
export class BasicSqlDataFilterWrapper {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsBasicSqlDataFilterWrapper(bb, obj) {
        return (obj || new BasicSqlDataFilterWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsBasicSqlDataFilterWrapper(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BasicSqlDataFilterWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    filterWrapperType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : SQLFilterWrapperType.or;
    }
    filtersType(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    filtersTypeLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    filtersTypeArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    filters(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__union(obj, this.bb.__vector(this.bb_pos + offset) + index * 4) : null;
    }
    filtersLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startBasicSqlDataFilterWrapper(builder) {
        builder.startObject(3);
    }
    static addFilterWrapperType(builder, filterWrapperType) {
        builder.addFieldInt8(0, filterWrapperType, SQLFilterWrapperType.or);
    }
    static addFiltersType(builder, filtersTypeOffset) {
        builder.addFieldOffset(1, filtersTypeOffset, 0);
    }
    static createFiltersTypeVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFiltersTypeVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addFilters(builder, filtersOffset) {
        builder.addFieldOffset(2, filtersOffset, 0);
    }
    static createFiltersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startFiltersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endBasicSqlDataFilterWrapper(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createBasicSqlDataFilterWrapper(builder, filterWrapperType, filtersTypeOffset, filtersOffset) {
        BasicSqlDataFilterWrapper.startBasicSqlDataFilterWrapper(builder);
        BasicSqlDataFilterWrapper.addFilterWrapperType(builder, filterWrapperType);
        BasicSqlDataFilterWrapper.addFiltersType(builder, filtersTypeOffset);
        BasicSqlDataFilterWrapper.addFilters(builder, filtersOffset);
        return BasicSqlDataFilterWrapper.endBasicSqlDataFilterWrapper(builder);
    }
}
