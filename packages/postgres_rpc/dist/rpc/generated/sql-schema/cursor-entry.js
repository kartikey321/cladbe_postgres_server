// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { FilterValue } from '../sql-schema/filter-value.js';
export class CursorEntry {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCursorEntry(bb, obj) {
        return (obj || new CursorEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCursorEntry(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CursorEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    field(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    valueType() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : FilterValue.NONE;
    }
    value(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    static startCursorEntry(builder) {
        builder.startObject(3);
    }
    static addField(builder, fieldOffset) {
        builder.addFieldOffset(0, fieldOffset, 0);
    }
    static addValueType(builder, valueType) {
        builder.addFieldInt8(1, valueType, FilterValue.NONE);
    }
    static addValue(builder, valueOffset) {
        builder.addFieldOffset(2, valueOffset, 0);
    }
    static endCursorEntry(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // field
        return offset;
    }
    static createCursorEntry(builder, fieldOffset, valueType, valueOffset) {
        CursorEntry.startCursorEntry(builder);
        CursorEntry.addField(builder, fieldOffset);
        CursorEntry.addValueType(builder, valueType);
        CursorEntry.addValue(builder, valueOffset);
        return CursorEntry.endCursorEntry(builder);
    }
}
