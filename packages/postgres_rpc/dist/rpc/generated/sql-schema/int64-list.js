// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Int64List {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsInt64List(bb, obj) {
        return (obj || new Int64List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsInt64List(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Int64List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    values(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
    }
    valuesLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startInt64List(builder) {
        builder.startObject(1);
    }
    static addValues(builder, valuesOffset) {
        builder.addFieldOffset(0, valuesOffset, 0);
    }
    static createValuesVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt64(data[i]);
        }
        return builder.endVector();
    }
    static startValuesVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static endInt64List(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // values
        return offset;
    }
    static createInt64List(builder, valuesOffset) {
        Int64List.startInt64List(builder);
        Int64List.addValues(builder, valuesOffset);
        return Int64List.endInt64List(builder);
    }
}
