// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class DataSort {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDataSort(bb, obj) {
        return (obj || new DataSort()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDataSort(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DataSort()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    field(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ascending() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    static startDataSort(builder) {
        builder.startObject(2);
    }
    static addField(builder, fieldOffset) {
        builder.addFieldOffset(0, fieldOffset, 0);
    }
    static addAscending(builder, ascending) {
        builder.addFieldInt8(1, +ascending, +false);
    }
    static endDataSort(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createDataSort(builder, fieldOffset, ascending) {
        DataSort.startDataSort(builder);
        DataSort.addField(builder, fieldOffset);
        DataSort.addAscending(builder, ascending);
        return DataSort.endDataSort(builder);
    }
}
