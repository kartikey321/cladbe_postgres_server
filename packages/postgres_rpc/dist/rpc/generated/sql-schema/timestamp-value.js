// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { TimeUnit } from '../sql-schema/time-unit.js';
export class TimestampValue {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTimestampValue(bb, obj) {
        return (obj || new TimestampValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTimestampValue(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TimestampValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    epoch() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');
    }
    unit() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : TimeUnit.MICROS;
    }
    static startTimestampValue(builder) {
        builder.startObject(2);
    }
    static addEpoch(builder, epoch) {
        builder.addFieldInt64(0, epoch, BigInt('0'));
    }
    static addUnit(builder, unit) {
        builder.addFieldInt8(1, unit, TimeUnit.MICROS);
    }
    static endTimestampValue(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createTimestampValue(builder, epoch, unit) {
        TimestampValue.startTimestampValue(builder);
        TimestampValue.addEpoch(builder, epoch);
        TimestampValue.addUnit(builder, unit);
        return TimestampValue.endTimestampValue(builder);
    }
}
