// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { BasicSqlDataFilterWrapper } from '../sql-schema/basic-sql-data-filter-wrapper.js';
import { CursorEntry } from '../sql-schema/cursor-entry.js';
import { OrderKeySpec } from '../sql-schema/order-key-spec.js';
export class GetDataReq {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetDataReq(bb, obj) {
        return (obj || new GetDataReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetDataReq(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetDataReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    companyId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    tableName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    wrapper(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new BasicSqlDataFilterWrapper()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    limit() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    offset() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    order(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new OrderKeySpec()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    orderLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    cursor(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new CursorEntry()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    cursorLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    strictAfter() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    }
    static startGetDataReq(builder) {
        builder.startObject(8);
    }
    static addCompanyId(builder, companyIdOffset) {
        builder.addFieldOffset(0, companyIdOffset, 0);
    }
    static addTableName(builder, tableNameOffset) {
        builder.addFieldOffset(1, tableNameOffset, 0);
    }
    static addWrapper(builder, wrapperOffset) {
        builder.addFieldOffset(2, wrapperOffset, 0);
    }
    static addLimit(builder, limit) {
        builder.addFieldInt32(3, limit, 0);
    }
    static addOffset(builder, offset) {
        builder.addFieldInt32(4, offset, 0);
    }
    static addOrder(builder, orderOffset) {
        builder.addFieldOffset(5, orderOffset, 0);
    }
    static createOrderVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOrderVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addCursor(builder, cursorOffset) {
        builder.addFieldOffset(6, cursorOffset, 0);
    }
    static createCursorVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCursorVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addStrictAfter(builder, strictAfter) {
        builder.addFieldInt8(7, +strictAfter, +true);
    }
    static endGetDataReq(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
