// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { TableDefinition } from '../sql-schema/table-definition.js';
export class CreateTableReq {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCreateTableReq(bb, obj) {
        return (obj || new CreateTableReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCreateTableReq(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CreateTableReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    companyId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    definition(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new TableDefinition()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startCreateTableReq(builder) {
        builder.startObject(2);
    }
    static addCompanyId(builder, companyIdOffset) {
        builder.addFieldOffset(0, companyIdOffset, 0);
    }
    static addDefinition(builder, definitionOffset) {
        builder.addFieldOffset(1, definitionOffset, 0);
    }
    static endCreateTableReq(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
