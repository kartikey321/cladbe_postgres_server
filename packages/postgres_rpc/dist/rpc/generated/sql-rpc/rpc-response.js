// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import { AggRes } from '../sql-rpc/agg-res.js';
import { BoolRes } from '../sql-rpc/bool-res.js';
import { RowJson } from '../sql-rpc/row-json.js';
import { RowsJson } from '../sql-rpc/rows-json.js';
export var RpcResponse;
(function (RpcResponse) {
    RpcResponse[RpcResponse["NONE"] = 0] = "NONE";
    RpcResponse[RpcResponse["RowsJson"] = 1] = "RowsJson";
    RpcResponse[RpcResponse["RowJson"] = 2] = "RowJson";
    RpcResponse[RpcResponse["BoolRes"] = 3] = "BoolRes";
    RpcResponse[RpcResponse["AggRes"] = 4] = "AggRes";
})(RpcResponse || (RpcResponse = {}));
export function unionToRpcResponse(type, accessor) {
    switch (RpcResponse[type]) {
        case 'NONE': return null;
        case 'RowsJson': return accessor(new RowsJson());
        case 'RowJson': return accessor(new RowJson());
        case 'BoolRes': return accessor(new BoolRes());
        case 'AggRes': return accessor(new AggRes());
        default: return null;
    }
}
export function unionListToRpcResponse(type, accessor, index) {
    switch (RpcResponse[type]) {
        case 'NONE': return null;
        case 'RowsJson': return accessor(index, new RowsJson());
        case 'RowJson': return accessor(index, new RowJson());
        case 'BoolRes': return accessor(index, new BoolRes());
        case 'AggRes': return accessor(index, new AggRes());
        default: return null;
    }
}
