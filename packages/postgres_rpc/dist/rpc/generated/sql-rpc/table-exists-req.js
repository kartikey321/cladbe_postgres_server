// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class TableExistsReq {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTableExistsReq(bb, obj) {
        return (obj || new TableExistsReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTableExistsReq(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TableExistsReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    companyId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    tableName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startTableExistsReq(builder) {
        builder.startObject(2);
    }
    static addCompanyId(builder, companyIdOffset) {
        builder.addFieldOffset(0, companyIdOffset, 0);
    }
    static addTableName(builder, tableNameOffset) {
        builder.addFieldOffset(1, tableNameOffset, 0);
    }
    static endTableExistsReq(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createTableExistsReq(builder, companyIdOffset, tableNameOffset) {
        TableExistsReq.startTableExistsReq(builder);
        TableExistsReq.addCompanyId(builder, companyIdOffset);
        TableExistsReq.addTableName(builder, tableNameOffset);
        return TableExistsReq.endTableExistsReq(builder);
    }
}
