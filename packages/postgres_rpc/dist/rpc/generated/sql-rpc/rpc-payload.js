// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import { AddSingleReq } from '../sql-rpc/add-single-req.js';
import { CreateTableReq } from '../sql-rpc/create-table-req.js';
import { DeleteRowReq } from '../sql-rpc/delete-row-req.js';
import { GetDataReq } from '../sql-rpc/get-data-req.js';
import { GetSingleReq } from '../sql-rpc/get-single-req.js';
import { RunAggregationReq } from '../sql-rpc/run-aggregation-req.js';
import { TableExistsReq } from '../sql-rpc/table-exists-req.js';
import { UpdateSingleReq } from '../sql-rpc/update-single-req.js';
export var RpcPayload;
(function (RpcPayload) {
    RpcPayload[RpcPayload["NONE"] = 0] = "NONE";
    RpcPayload[RpcPayload["GetDataReq"] = 1] = "GetDataReq";
    RpcPayload[RpcPayload["GetSingleReq"] = 2] = "GetSingleReq";
    RpcPayload[RpcPayload["AddSingleReq"] = 3] = "AddSingleReq";
    RpcPayload[RpcPayload["UpdateSingleReq"] = 4] = "UpdateSingleReq";
    RpcPayload[RpcPayload["DeleteRowReq"] = 5] = "DeleteRowReq";
    RpcPayload[RpcPayload["CreateTableReq"] = 6] = "CreateTableReq";
    RpcPayload[RpcPayload["TableExistsReq"] = 7] = "TableExistsReq";
    RpcPayload[RpcPayload["RunAggregationReq"] = 8] = "RunAggregationReq";
})(RpcPayload || (RpcPayload = {}));
export function unionToRpcPayload(type, accessor) {
    switch (RpcPayload[type]) {
        case 'NONE': return null;
        case 'GetDataReq': return accessor(new GetDataReq());
        case 'GetSingleReq': return accessor(new GetSingleReq());
        case 'AddSingleReq': return accessor(new AddSingleReq());
        case 'UpdateSingleReq': return accessor(new UpdateSingleReq());
        case 'DeleteRowReq': return accessor(new DeleteRowReq());
        case 'CreateTableReq': return accessor(new CreateTableReq());
        case 'TableExistsReq': return accessor(new TableExistsReq());
        case 'RunAggregationReq': return accessor(new RunAggregationReq());
        default: return null;
    }
}
export function unionListToRpcPayload(type, accessor, index) {
    switch (RpcPayload[type]) {
        case 'NONE': return null;
        case 'GetDataReq': return accessor(index, new GetDataReq());
        case 'GetSingleReq': return accessor(index, new GetSingleReq());
        case 'AddSingleReq': return accessor(index, new AddSingleReq());
        case 'UpdateSingleReq': return accessor(index, new UpdateSingleReq());
        case 'DeleteRowReq': return accessor(index, new DeleteRowReq());
        case 'CreateTableReq': return accessor(index, new CreateTableReq());
        case 'TableExistsReq': return accessor(index, new TableExistsReq());
        case 'RunAggregationReq': return accessor(index, new RunAggregationReq());
        default: return null;
    }
}
