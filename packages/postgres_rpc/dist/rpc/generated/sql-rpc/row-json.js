// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class RowJson {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRowJson(bb, obj) {
        return (obj || new RowJson()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRowJson(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RowJson()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    row(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startRowJson(builder) {
        builder.startObject(1);
    }
    static addRow(builder, rowOffset) {
        builder.addFieldOffset(0, rowOffset, 0);
    }
    static endRowJson(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createRowJson(builder, rowOffset) {
        RowJson.startRowJson(builder);
        RowJson.addRow(builder, rowOffset);
        return RowJson.endRowJson(builder);
    }
}
