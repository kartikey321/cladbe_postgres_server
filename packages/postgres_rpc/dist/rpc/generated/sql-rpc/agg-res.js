// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { DataHelperAggregation } from '../sql-schema/data-helper-aggregation.js';
export class AggRes {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsAggRes(bb, obj) {
        return (obj || new AggRes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsAggRes(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AggRes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    agg(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new DataHelperAggregation()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startAggRes(builder) {
        builder.startObject(1);
    }
    static addAgg(builder, aggOffset) {
        builder.addFieldOffset(0, aggOffset, 0);
    }
    static endAggRes(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createAggRes(builder, aggOffset) {
        AggRes.startAggRes(builder);
        AggRes.addAgg(builder, aggOffset);
        return AggRes.endAggRes(builder);
    }
}
