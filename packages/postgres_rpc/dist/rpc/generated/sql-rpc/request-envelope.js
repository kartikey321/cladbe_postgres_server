// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { RpcMethod } from '../sql-rpc/rpc-method.js';
import { RpcPayload } from '../sql-rpc/rpc-payload.js';
export class RequestEnvelope {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRequestEnvelope(bb, obj) {
        return (obj || new RequestEnvelope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRequestEnvelope(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RequestEnvelope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    correlationId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    replyTopic(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    method() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : RpcMethod.GET_DATA;
    }
    payloadType() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : RpcPayload.NONE;
    }
    payload(obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    static startRequestEnvelope(builder) {
        builder.startObject(5);
    }
    static addCorrelationId(builder, correlationIdOffset) {
        builder.addFieldOffset(0, correlationIdOffset, 0);
    }
    static addReplyTopic(builder, replyTopicOffset) {
        builder.addFieldOffset(1, replyTopicOffset, 0);
    }
    static addMethod(builder, method) {
        builder.addFieldInt8(2, method, RpcMethod.GET_DATA);
    }
    static addPayloadType(builder, payloadType) {
        builder.addFieldInt8(3, payloadType, RpcPayload.NONE);
    }
    static addPayload(builder, payloadOffset) {
        builder.addFieldOffset(4, payloadOffset, 0);
    }
    static endRequestEnvelope(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishRequestEnvelopeBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedRequestEnvelopeBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createRequestEnvelope(builder, correlationIdOffset, replyTopicOffset, method, payloadType, payloadOffset) {
        RequestEnvelope.startRequestEnvelope(builder);
        RequestEnvelope.addCorrelationId(builder, correlationIdOffset);
        RequestEnvelope.addReplyTopic(builder, replyTopicOffset);
        RequestEnvelope.addMethod(builder, method);
        RequestEnvelope.addPayloadType(builder, payloadType);
        RequestEnvelope.addPayload(builder, payloadOffset);
        return RequestEnvelope.endRequestEnvelope(builder);
    }
}
