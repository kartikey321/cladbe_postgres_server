// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class UpdateSingleReq {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsUpdateSingleReq(bb, obj) {
        return (obj || new UpdateSingleReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsUpdateSingleReq(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new UpdateSingleReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    companyId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    tableName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    primaryKeyColumn(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    primaryId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    updatesJson(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startUpdateSingleReq(builder) {
        builder.startObject(5);
    }
    static addCompanyId(builder, companyIdOffset) {
        builder.addFieldOffset(0, companyIdOffset, 0);
    }
    static addTableName(builder, tableNameOffset) {
        builder.addFieldOffset(1, tableNameOffset, 0);
    }
    static addPrimaryKeyColumn(builder, primaryKeyColumnOffset) {
        builder.addFieldOffset(2, primaryKeyColumnOffset, 0);
    }
    static addPrimaryId(builder, primaryIdOffset) {
        builder.addFieldOffset(3, primaryIdOffset, 0);
    }
    static addUpdatesJson(builder, updatesJsonOffset) {
        builder.addFieldOffset(4, updatesJsonOffset, 0);
    }
    static endUpdateSingleReq(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createUpdateSingleReq(builder, companyIdOffset, tableNameOffset, primaryKeyColumnOffset, primaryIdOffset, updatesJsonOffset) {
        UpdateSingleReq.startUpdateSingleReq(builder);
        UpdateSingleReq.addCompanyId(builder, companyIdOffset);
        UpdateSingleReq.addTableName(builder, tableNameOffset);
        UpdateSingleReq.addPrimaryKeyColumn(builder, primaryKeyColumnOffset);
        UpdateSingleReq.addPrimaryId(builder, primaryIdOffset);
        UpdateSingleReq.addUpdatesJson(builder, updatesJsonOffset);
        return UpdateSingleReq.endUpdateSingleReq(builder);
    }
}
