// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { BasicSqlDataFilterWrapper } from '../sql-schema/basic-sql-data-filter-wrapper.js';
export class RunAggregationReq {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRunAggregationReq(bb, obj) {
        return (obj || new RunAggregationReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRunAggregationReq(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RunAggregationReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    companyId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    tableName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    countEnabled() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    sumFields(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    sumFieldsLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    averageFields(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    averageFieldsLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    minimumFields(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    minimumFieldsLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    maximumFields(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    maximumFieldsLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    wrapper(obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new BasicSqlDataFilterWrapper()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startRunAggregationReq(builder) {
        builder.startObject(8);
    }
    static addCompanyId(builder, companyIdOffset) {
        builder.addFieldOffset(0, companyIdOffset, 0);
    }
    static addTableName(builder, tableNameOffset) {
        builder.addFieldOffset(1, tableNameOffset, 0);
    }
    static addCountEnabled(builder, countEnabled) {
        builder.addFieldInt8(2, +countEnabled, +false);
    }
    static addSumFields(builder, sumFieldsOffset) {
        builder.addFieldOffset(3, sumFieldsOffset, 0);
    }
    static createSumFieldsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startSumFieldsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAverageFields(builder, averageFieldsOffset) {
        builder.addFieldOffset(4, averageFieldsOffset, 0);
    }
    static createAverageFieldsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startAverageFieldsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMinimumFields(builder, minimumFieldsOffset) {
        builder.addFieldOffset(5, minimumFieldsOffset, 0);
    }
    static createMinimumFieldsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMinimumFieldsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMaximumFields(builder, maximumFieldsOffset) {
        builder.addFieldOffset(6, maximumFieldsOffset, 0);
    }
    static createMaximumFieldsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMaximumFieldsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addWrapper(builder, wrapperOffset) {
        builder.addFieldOffset(7, wrapperOffset, 0);
    }
    static endRunAggregationReq(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
