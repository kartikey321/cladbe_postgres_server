// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { KeyValuePair } from '../sql-schema/key-value-pair.js';


export class DataHelperAggregation {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataHelperAggregation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataHelperAggregation(bb:flatbuffers.ByteBuffer, obj?:DataHelperAggregation):DataHelperAggregation {
  return (obj || new DataHelperAggregation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataHelperAggregation(bb:flatbuffers.ByteBuffer, obj?:DataHelperAggregation):DataHelperAggregation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataHelperAggregation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

sumValues(index: number, obj?:KeyValuePair):KeyValuePair|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new KeyValuePair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

sumValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

avgValues(index: number, obj?:KeyValuePair):KeyValuePair|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new KeyValuePair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

avgValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

minimumValues(index: number, obj?:KeyValuePair):KeyValuePair|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new KeyValuePair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

minimumValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

maximumValues(index: number, obj?:KeyValuePair):KeyValuePair|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new KeyValuePair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

maximumValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDataHelperAggregation(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addCount(builder:flatbuffers.Builder, count:number) {
  builder.addFieldInt32(0, count, 0);
}

static addSumValues(builder:flatbuffers.Builder, sumValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sumValuesOffset, 0);
}

static createSumValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSumValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAvgValues(builder:flatbuffers.Builder, avgValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, avgValuesOffset, 0);
}

static createAvgValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAvgValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMinimumValues(builder:flatbuffers.Builder, minimumValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, minimumValuesOffset, 0);
}

static createMinimumValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMinimumValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMaximumValues(builder:flatbuffers.Builder, maximumValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, maximumValuesOffset, 0);
}

static createMaximumValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMaximumValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDataHelperAggregation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDataHelperAggregation(builder:flatbuffers.Builder, count:number, sumValuesOffset:flatbuffers.Offset, avgValuesOffset:flatbuffers.Offset, minimumValuesOffset:flatbuffers.Offset, maximumValuesOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataHelperAggregation.startDataHelperAggregation(builder);
  DataHelperAggregation.addCount(builder, count);
  DataHelperAggregation.addSumValues(builder, sumValuesOffset);
  DataHelperAggregation.addAvgValues(builder, avgValuesOffset);
  DataHelperAggregation.addMinimumValues(builder, minimumValuesOffset);
  DataHelperAggregation.addMaximumValues(builder, maximumValuesOffset);
  return DataHelperAggregation.endDataHelperAggregation(builder);
}
}
