// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BasicSqlDataFilterType } from '../sql-schema/basic-sql-data-filter-type.js';
import { FilterValue, unionToFilterValue, unionListToFilterValue } from '../sql-schema/filter-value.js';
import { SqlFilterModifier } from '../sql-schema/sql-filter-modifier.js';


export class BasicSqlDataFilter {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BasicSqlDataFilter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBasicSqlDataFilter(bb:flatbuffers.ByteBuffer, obj?:BasicSqlDataFilter):BasicSqlDataFilter {
  return (obj || new BasicSqlDataFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBasicSqlDataFilter(bb:flatbuffers.ByteBuffer, obj?:BasicSqlDataFilter):BasicSqlDataFilter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BasicSqlDataFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fieldName():string|null
fieldName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fieldName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

valueType():FilterValue {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FilterValue.NONE;
}

value<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

filterType():BasicSqlDataFilterType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : BasicSqlDataFilterType.equals;
}

modifier(obj?:SqlFilterModifier):SqlFilterModifier|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new SqlFilterModifier()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startBasicSqlDataFilter(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addFieldName(builder:flatbuffers.Builder, fieldNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fieldNameOffset, 0);
}

static addValueType(builder:flatbuffers.Builder, valueType:FilterValue) {
  builder.addFieldInt8(1, valueType, FilterValue.NONE);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valueOffset, 0);
}

static addFilterType(builder:flatbuffers.Builder, filterType:BasicSqlDataFilterType) {
  builder.addFieldInt8(3, filterType, BasicSqlDataFilterType.equals);
}

static addModifier(builder:flatbuffers.Builder, modifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, modifierOffset, 0);
}

static endBasicSqlDataFilter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
