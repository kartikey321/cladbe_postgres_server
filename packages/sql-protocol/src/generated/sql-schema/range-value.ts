// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FilterValue, unionToFilterValue, unionListToFilterValue } from '../sql-schema/filter-value.js';


export class RangeValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RangeValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRangeValue(bb:flatbuffers.ByteBuffer, obj?:RangeValue):RangeValue {
  return (obj || new RangeValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRangeValue(bb:flatbuffers.ByteBuffer, obj?:RangeValue):RangeValue {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RangeValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

lowType():FilterValue {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FilterValue.NONE;
}

low<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

highType():FilterValue {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FilterValue.NONE;
}

high<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

includeLow():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

includeHigh():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

static startRangeValue(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addLowType(builder:flatbuffers.Builder, lowType:FilterValue) {
  builder.addFieldInt8(0, lowType, FilterValue.NONE);
}

static addLow(builder:flatbuffers.Builder, lowOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, lowOffset, 0);
}

static addHighType(builder:flatbuffers.Builder, highType:FilterValue) {
  builder.addFieldInt8(2, highType, FilterValue.NONE);
}

static addHigh(builder:flatbuffers.Builder, highOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, highOffset, 0);
}

static addIncludeLow(builder:flatbuffers.Builder, includeLow:boolean) {
  builder.addFieldInt8(4, +includeLow, +true);
}

static addIncludeHigh(builder:flatbuffers.Builder, includeHigh:boolean) {
  builder.addFieldInt8(5, +includeHigh, +true);
}

static endRangeValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRangeValue(builder:flatbuffers.Builder, lowType:FilterValue, lowOffset:flatbuffers.Offset, highType:FilterValue, highOffset:flatbuffers.Offset, includeLow:boolean, includeHigh:boolean):flatbuffers.Offset {
  RangeValue.startRangeValue(builder);
  RangeValue.addLowType(builder, lowType);
  RangeValue.addLow(builder, lowOffset);
  RangeValue.addHighType(builder, highType);
  RangeValue.addHigh(builder, highOffset);
  RangeValue.addIncludeLow(builder, includeLow);
  RangeValue.addIncludeHigh(builder, includeHigh);
  return RangeValue.endRangeValue(builder);
}
}
