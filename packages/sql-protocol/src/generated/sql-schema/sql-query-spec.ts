// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BasicSqlDataFilterWrapper } from '../sql-schema/basic-sql-data-filter-wrapper.js';
import { CursorEntry } from '../sql-schema/cursor-entry.js';
import { OrderKeySpec } from '../sql-schema/order-key-spec.js';


export class SqlQuerySpec {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SqlQuerySpec {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSqlQuerySpec(bb:flatbuffers.ByteBuffer, obj?:SqlQuerySpec):SqlQuerySpec {
  return (obj || new SqlQuerySpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSqlQuerySpec(bb:flatbuffers.ByteBuffer, obj?:SqlQuerySpec):SqlQuerySpec {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SqlQuerySpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

wrapper(obj?:BasicSqlDataFilterWrapper):BasicSqlDataFilterWrapper|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BasicSqlDataFilterWrapper()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

limit():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 50;
}

order(index: number, obj?:OrderKeySpec):OrderKeySpec|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new OrderKeySpec()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

orderLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cursor(index: number, obj?:CursorEntry):CursorEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new CursorEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cursorLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

strictAfter():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

static startSqlQuerySpec(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addWrapper(builder:flatbuffers.Builder, wrapperOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, wrapperOffset, 0);
}

static addLimit(builder:flatbuffers.Builder, limit:number) {
  builder.addFieldInt32(1, limit, 50);
}

static addOrder(builder:flatbuffers.Builder, orderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, orderOffset, 0);
}

static createOrderVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOrderVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCursor(builder:flatbuffers.Builder, cursorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, cursorOffset, 0);
}

static createCursorVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCursorVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStrictAfter(builder:flatbuffers.Builder, strictAfter:boolean) {
  builder.addFieldInt8(4, +strictAfter, +true);
}

static endSqlQuerySpec(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSqlQuerySpec(builder:flatbuffers.Builder, wrapperOffset:flatbuffers.Offset, limit:number, orderOffset:flatbuffers.Offset, cursorOffset:flatbuffers.Offset, strictAfter:boolean):flatbuffers.Offset {
  SqlQuerySpec.startSqlQuerySpec(builder);
  SqlQuerySpec.addWrapper(builder, wrapperOffset);
  SqlQuerySpec.addLimit(builder, limit);
  SqlQuerySpec.addOrder(builder, orderOffset);
  SqlQuerySpec.addCursor(builder, cursorOffset);
  SqlQuerySpec.addStrictAfter(builder, strictAfter);
  return SqlQuerySpec.endSqlQuerySpec(builder);
}
}
