// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DataSort {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataSort {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataSort(bb:flatbuffers.ByteBuffer, obj?:DataSort):DataSort {
  return (obj || new DataSort()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataSort(bb:flatbuffers.ByteBuffer, obj?:DataSort):DataSort {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataSort()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

field():string|null
field(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
field(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ascending():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDataSort(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addField(builder:flatbuffers.Builder, fieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fieldOffset, 0);
}

static addAscending(builder:flatbuffers.Builder, ascending:boolean) {
  builder.addFieldInt8(1, +ascending, +false);
}

static endDataSort(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDataSort(builder:flatbuffers.Builder, fieldOffset:flatbuffers.Offset, ascending:boolean):flatbuffers.Offset {
  DataSort.startDataSort(builder);
  DataSort.addField(builder, fieldOffset);
  DataSort.addAscending(builder, ascending);
  return DataSort.endDataSort(builder);
}
}
