// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OrderSort } from '../sql-schema/order-sort.js';


export class OrderKeySpec {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OrderKeySpec {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOrderKeySpec(bb:flatbuffers.ByteBuffer, obj?:OrderKeySpec):OrderKeySpec {
  return (obj || new OrderKeySpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOrderKeySpec(bb:flatbuffers.ByteBuffer, obj?:OrderKeySpec):OrderKeySpec {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OrderKeySpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

field():string|null
field(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
field(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sort():OrderSort {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : OrderSort.DESC_DEFAULT;
}

isPk():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startOrderKeySpec(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addField(builder:flatbuffers.Builder, fieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fieldOffset, 0);
}

static addSort(builder:flatbuffers.Builder, sort:OrderSort) {
  builder.addFieldInt8(1, sort, OrderSort.DESC_DEFAULT);
}

static addIsPk(builder:flatbuffers.Builder, isPk:boolean) {
  builder.addFieldInt8(2, +isPk, +false);
}

static endOrderKeySpec(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // field
  return offset;
}

static createOrderKeySpec(builder:flatbuffers.Builder, fieldOffset:flatbuffers.Offset, sort:OrderSort, isPk:boolean):flatbuffers.Offset {
  OrderKeySpec.startOrderKeySpec(builder);
  OrderKeySpec.addField(builder, fieldOffset);
  OrderKeySpec.addSort(builder, sort);
  OrderKeySpec.addIsPk(builder, isPk);
  return OrderKeySpec.endOrderKeySpec(builder);
}
}
