// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class GetSingleReq {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetSingleReq {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetSingleReq(bb:flatbuffers.ByteBuffer, obj?:GetSingleReq):GetSingleReq {
  return (obj || new GetSingleReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetSingleReq(bb:flatbuffers.ByteBuffer, obj?:GetSingleReq):GetSingleReq {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetSingleReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

companyId():string|null
companyId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
companyId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tableName():string|null
tableName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tableName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

primaryKeyColumn():string|null
primaryKeyColumn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
primaryKeyColumn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

primaryId():string|null
primaryId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
primaryId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startGetSingleReq(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addCompanyId(builder:flatbuffers.Builder, companyIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, companyIdOffset, 0);
}

static addTableName(builder:flatbuffers.Builder, tableNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tableNameOffset, 0);
}

static addPrimaryKeyColumn(builder:flatbuffers.Builder, primaryKeyColumnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, primaryKeyColumnOffset, 0);
}

static addPrimaryId(builder:flatbuffers.Builder, primaryIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, primaryIdOffset, 0);
}

static endGetSingleReq(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetSingleReq(builder:flatbuffers.Builder, companyIdOffset:flatbuffers.Offset, tableNameOffset:flatbuffers.Offset, primaryKeyColumnOffset:flatbuffers.Offset, primaryIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetSingleReq.startGetSingleReq(builder);
  GetSingleReq.addCompanyId(builder, companyIdOffset);
  GetSingleReq.addTableName(builder, tableNameOffset);
  GetSingleReq.addPrimaryKeyColumn(builder, primaryKeyColumnOffset);
  GetSingleReq.addPrimaryId(builder, primaryIdOffset);
  return GetSingleReq.endGetSingleReq(builder);
}
}
