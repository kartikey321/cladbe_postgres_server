// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BasicSqlDataFilterWrapper } from '../sql-schema/basic-sql-data-filter-wrapper.js';


export class RunAggregationReq {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RunAggregationReq {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRunAggregationReq(bb:flatbuffers.ByteBuffer, obj?:RunAggregationReq):RunAggregationReq {
  return (obj || new RunAggregationReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRunAggregationReq(bb:flatbuffers.ByteBuffer, obj?:RunAggregationReq):RunAggregationReq {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RunAggregationReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

companyId():string|null
companyId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
companyId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tableName():string|null
tableName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tableName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

countEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

sumFields(index: number):string
sumFields(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sumFields(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sumFieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

averageFields(index: number):string
averageFields(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
averageFields(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

averageFieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

minimumFields(index: number):string
minimumFields(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
minimumFields(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

minimumFieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

maximumFields(index: number):string
maximumFields(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
maximumFields(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

maximumFieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

wrapper(obj?:BasicSqlDataFilterWrapper):BasicSqlDataFilterWrapper|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new BasicSqlDataFilterWrapper()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startRunAggregationReq(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addCompanyId(builder:flatbuffers.Builder, companyIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, companyIdOffset, 0);
}

static addTableName(builder:flatbuffers.Builder, tableNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tableNameOffset, 0);
}

static addCountEnabled(builder:flatbuffers.Builder, countEnabled:boolean) {
  builder.addFieldInt8(2, +countEnabled, +false);
}

static addSumFields(builder:flatbuffers.Builder, sumFieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, sumFieldsOffset, 0);
}

static createSumFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSumFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAverageFields(builder:flatbuffers.Builder, averageFieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, averageFieldsOffset, 0);
}

static createAverageFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAverageFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMinimumFields(builder:flatbuffers.Builder, minimumFieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, minimumFieldsOffset, 0);
}

static createMinimumFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMinimumFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMaximumFields(builder:flatbuffers.Builder, maximumFieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, maximumFieldsOffset, 0);
}

static createMaximumFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMaximumFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWrapper(builder:flatbuffers.Builder, wrapperOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, wrapperOffset, 0);
}

static endRunAggregationReq(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
