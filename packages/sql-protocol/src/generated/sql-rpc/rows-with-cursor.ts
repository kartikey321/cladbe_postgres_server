// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CursorEntry } from '../sql-schema/cursor-entry.js';


export class RowsWithCursor {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RowsWithCursor {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRowsWithCursor(bb:flatbuffers.ByteBuffer, obj?:RowsWithCursor):RowsWithCursor {
  return (obj || new RowsWithCursor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRowsWithCursor(bb:flatbuffers.ByteBuffer, obj?:RowsWithCursor):RowsWithCursor {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RowsWithCursor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rows(index: number):string
rows(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rows(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rowsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cursor(index: number, obj?:CursorEntry):CursorEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new CursorEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cursorLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRowsWithCursor(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRows(builder:flatbuffers.Builder, rowsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rowsOffset, 0);
}

static createRowsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRowsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCursor(builder:flatbuffers.Builder, cursorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cursorOffset, 0);
}

static createCursorVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCursorVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRowsWithCursor(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRowsWithCursor(builder:flatbuffers.Builder, rowsOffset:flatbuffers.Offset, cursorOffset:flatbuffers.Offset):flatbuffers.Offset {
  RowsWithCursor.startRowsWithCursor(builder);
  RowsWithCursor.addRows(builder, rowsOffset);
  RowsWithCursor.addCursor(builder, cursorOffset);
  return RowsWithCursor.endRowsWithCursor(builder);
}
}
