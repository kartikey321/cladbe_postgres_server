"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlQuerySpec = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = __importStar(require("flatbuffers"));
const basic_sql_data_filter_wrapper_js_1 = require("../sql-schema/basic-sql-data-filter-wrapper.js");
const cursor_entry_js_1 = require("../sql-schema/cursor-entry.js");
const order_key_spec_js_1 = require("../sql-schema/order-key-spec.js");
class SqlQuerySpec {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSqlQuerySpec(bb, obj) {
        return (obj || new SqlQuerySpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSqlQuerySpec(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SqlQuerySpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    wrapper(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new basic_sql_data_filter_wrapper_js_1.BasicSqlDataFilterWrapper()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    limit() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 50;
    }
    order(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new order_key_spec_js_1.OrderKeySpec()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    orderLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    cursor(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new cursor_entry_js_1.CursorEntry()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    cursorLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    strictAfter() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    }
    static startSqlQuerySpec(builder) {
        builder.startObject(5);
    }
    static addWrapper(builder, wrapperOffset) {
        builder.addFieldOffset(0, wrapperOffset, 0);
    }
    static addLimit(builder, limit) {
        builder.addFieldInt32(1, limit, 50);
    }
    static addOrder(builder, orderOffset) {
        builder.addFieldOffset(2, orderOffset, 0);
    }
    static createOrderVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOrderVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addCursor(builder, cursorOffset) {
        builder.addFieldOffset(3, cursorOffset, 0);
    }
    static createCursorVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCursorVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addStrictAfter(builder, strictAfter) {
        builder.addFieldInt8(4, +strictAfter, +true);
    }
    static endSqlQuerySpec(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createSqlQuerySpec(builder, wrapperOffset, limit, orderOffset, cursorOffset, strictAfter) {
        SqlQuerySpec.startSqlQuerySpec(builder);
        SqlQuerySpec.addWrapper(builder, wrapperOffset);
        SqlQuerySpec.addLimit(builder, limit);
        SqlQuerySpec.addOrder(builder, orderOffset);
        SqlQuerySpec.addCursor(builder, cursorOffset);
        SqlQuerySpec.addStrictAfter(builder, strictAfter);
        return SqlQuerySpec.endSqlQuerySpec(builder);
    }
}
exports.SqlQuerySpec = SqlQuerySpec;
