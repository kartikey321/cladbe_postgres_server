namespace SqlSchema;

// ---------------- Enums with explicit numbers ----------------

// Stable: text/numeric types
enum SQLDataType : ubyte {
  text             = 0,
  varchar          = 1,
  char_            = 2,
  varcharArray     = 3,
  textArray        = 4,
  charArray        = 5,
  integer          = 6,
  bigInt           = 7,
  smallInt         = 8,
  decimal          = 9,
  numeric          = 10,
  real             = 11,
  doublePrecision  = 12,
  serial           = 13,
  bigSerial        = 14,
  smallSerial      = 15,
  money            = 16,
  date             = 17,
  time             = 18,
  timestamp        = 19,
  timestamptz      = 20,
  interval         = 21,
  timetz           = 22,
  boolean_         = 23,
  bytea            = 24,
  json             = 25,
  jsonb            = 26,
  jsonArray        = 27,
  jsonbArray       = 28,
  uuid             = 29,
  xml              = 30,
  array            = 31,
  custom           = 32
}

enum ColumnConstraint : ubyte {
  primaryKey        = 0,
  unique            = 1,
  notNull           = 2,
  check             = 3,
  default_          = 4,
  indexed           = 5,
  exclusion         = 6,
  generated         = 7,
  identity          = 8,
  references        = 9,
  noInherit         = 10,
  nullsNotDistinct  = 11
}

enum SQLFilterWrapperType : ubyte {
  or   = 0,
  and  = 1
}

enum NullsSortOrder : ubyte {
  first   = 0,
  last    = 1,
  default_= 2
}

enum TimeUnit : ubyte {
  SECONDS = 0,
  MILLIS  = 1,
  MICROS  = 2,
  NANOS   = 3
}

enum BasicSqlDataFilterType : ubyte {
  equals              = 0,
  notEquals           = 1,
  lessThan            = 2,
  lessThanOrEquals    = 3,
  greaterThan         = 4,
  greaterThanOrEquals = 5,

  isNull              = 6,
  isNotNull           = 7,

  regex               = 8,
  notRegex            = 9,
  startsWith          = 10,
  endsWith            = 11,
  contains            = 12,
  notContains         = 13,

  arrayContains       = 14,
  arrayContainedBy    = 15,
  arrayOverlaps       = 16,
  arrayEquals         = 17,
  arrayNotEquals      = 18,
  arrayEmpty          = 19,
  arrayNotEmpty       = 20,
  arrayLength         = 21,

  jsonContains        = 22,
  jsonContainedBy     = 23,
  jsonHasKey          = 24,
  jsonHasAnyKey       = 25,
  jsonHasAllKeys      = 26,
  jsonGetField        = 27,
  jsonGetFieldAsText  = 28,

  between             = 29,
  notBetween          = 30,
  rangeContains       = 31,
  rangeContainedBy    = 32,

  inList              = 33,
  notInList           = 34
}

enum OrderSort : ubyte {
  ASC_DEFAULT      = 0,
  ASC_NULLS_FIRST  = 1,
  ASC_NULLS_LAST   = 2,
  DESC_DEFAULT     = 3,
  DESC_NULLS_FIRST = 4,
  DESC_NULLS_LAST  = 5
}

// ---------------- Helper tables (unchanged) ----------------
table KeyValuePair { key: string; value: string; }
table CustomOptions { options: [KeyValuePair]; }
table TableOptions  { options: [KeyValuePair]; }

table DataHelperAggregation {
  count: uint32;
  sum_values: [KeyValuePair];
  avg_values: [KeyValuePair];
  minimum_values: [KeyValuePair];
  maximum_values: [KeyValuePair];
}

table DataSort { field: string; ascending: bool; }

// ---------------- Value tables ----------------
table StringValue   { value: string; }
table NumberValue   { value: double; }
table Int64Value    { value: long; }
table BoolValue     { value: bool; }
table NullValue     { }

table TimestampValue {
  epoch: long;
  unit:  TimeUnit = MICROS;
}

table StringList  { values:[string] (required); }
table Int64List   { values:[long]   (required); }
table Float64List { values:[double] (required); }
table BoolList    { values:[bool]   (required); }

// ---------------- Unions ----------------
union FilterValue {
  StringValue,
  NumberValue,
  BoolValue,
  NullValue,
  Int64Value,
  TimestampValue,
  StringList,
  Int64List,
  Float64List,
  BoolList
}

table RangeValue {
  low:  FilterValue;
  high: FilterValue;
  include_low:  bool = true;
  include_high: bool = true;
}

table CursorEntry { field:string (required); value:FilterValue; }

// ---------------- Filters ----------------
table SqlFilterModifier {
  distinct: bool;
  case_insensitive: bool;
  nulls_order: NullsSortOrder;
}

table BasicSqlDataFilter {
  field_name: string;
  value: FilterValue;
  filter_type: BasicSqlDataFilterType;
  modifier: SqlFilterModifier;
}

union BasicSqlDataFilterUnion { BasicSqlDataFilterWrapper, BasicSqlDataFilter }

table BasicSqlDataFilterWrapper {
  filter_wrapper_type: SQLFilterWrapperType;
  filters: [BasicSqlDataFilterUnion];
}

// ---------------- Query ----------------
table OrderKeySpec {
  field:string (required);
  sort:OrderSort = DESC_DEFAULT;
  is_pk:bool = false;
}

table StreamingSqlDataFilter {
  hash: string;
  wrapper: BasicSqlDataFilterWrapper;
  limit: uint32 = 50;
  order: [OrderKeySpec];
  cursor: [CursorEntry];
  schema_version: ushort = 1;
}

// ---------------- Table metadata ----------------
table TableColumn {
  name: string;
  data_type: SQLDataType;
  is_nullable: bool;
  constraints: [ColumnConstraint];
  custom_options: CustomOptions;
}

table TableDefinition {
  name: string;
  columns: [TableColumn];
  comment: string;
  table_options: TableOptions;
}

root_type StreamingSqlDataFilter;
