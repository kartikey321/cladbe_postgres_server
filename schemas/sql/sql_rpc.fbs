include "sql_schema.fbs";

namespace SqlRpc;

// ---------- RPC Method ----------
enum RpcMethod : ubyte {
  GET_DATA         = 0,
  GET_SINGLE       = 1,
  ADD_SINGLE       = 2,
  UPDATE_SINGLE    = 3,
  DELETE_ROW       = 4,
  CREATE_TABLE     = 5,
  TABLE_EXISTS     = 6,
  RUN_AGGREGATION  = 7
}

// ---------- Requests ----------
table GetDataReq {
  company_id: string;
  table_name: string;
  wrapper: SqlSchema.BasicSqlDataFilterWrapper; // optional
  limit: uint32 = 0;                             // 0 â†’ no limit
  offset: uint32 = 0;                            // legacy; prefer cursor
  order: [SqlSchema.OrderKeySpec];               // optional
  cursor: [SqlSchema.CursorEntry];               // keyset cursor
  strict_after: bool = true;                     // default true
}

table GetSingleReq {
  company_id: string;
  table_name: string;
  primary_key_column: string;
  primary_id: string;
}

table AddSingleReq {
  company_id: string;
  table_name: string;
  primary_key_column: string;
  row_json: string; // JSON row payload
}

table UpdateSingleReq {
  company_id: string;
  table_name: string;
  primary_key_column: string;
  primary_id: string;
  updates_json: string; // JSON partial
}

table DeleteRowReq {
  company_id: string;
  table_name: string;
  primary_key_column: string;
  primary_id: string;
}

table CreateTableReq {
  company_id: string;
  definition: SqlSchema.TableDefinition;
}

table TableExistsReq {
  company_id: string;
  table_name: string;
}

table RunAggregationReq {
  company_id: string;
  table_name: string;
  count_enabled: bool = false;
  sum_fields: [string];
  average_fields: [string];
  minimum_fields: [string];
  maximum_fields: [string];
  wrapper: SqlSchema.BasicSqlDataFilterWrapper;
}

// ---------- Responses ----------
table RowsJson { rows: [string]; }           // unchanged
table RowJson  { row: string; }
table BoolRes  { value: bool; }
table AggRes   { agg: SqlSchema.DataHelperAggregation; }

// NEW: rows + cursor (e.g. WAL LSN) in one message
table RowsWithCursor {
  rows: [string];
  cursor: [SqlSchema.CursorEntry];
}

enum ErrorCode : ubyte { NONE = 0, BAD_REQUEST = 1, INTERNAL = 2 }

// Single union definition including the new type
union RpcResponse {
  RowsJson,
  RowJson,
  BoolRes,
  AggRes,
  RowsWithCursor
}

table ResponseEnvelope {
  correlation_id: string;
  ok: bool = true;
  error_code: ErrorCode = NONE;
  error_message: string;
  data: RpcResponse;
}

// ---------- Envelope ----------
union RpcPayload {
  GetDataReq,
  GetSingleReq,
  AddSingleReq,
  UpdateSingleReq,
  DeleteRowReq,
  CreateTableReq,
  TableExistsReq,
  RunAggregationReq
}

table RequestEnvelope {
  correlation_id: string;
  reply_topic: string;
  method: RpcMethod;
  payload: RpcPayload;
}

root_type RequestEnvelope;